// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: distcache.proto

package cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperatorClient is the client API for Operator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorClient interface {
	// 提交请求
	DCSubmit(ctx context.Context, in *DCRequest, opts ...grpc.CallOption) (*DCReply, error)
}

type operatorClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorClient(cc grpc.ClientConnInterface) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) DCSubmit(ctx context.Context, in *DCRequest, opts ...grpc.CallOption) (*DCReply, error) {
	out := new(DCReply)
	err := c.cc.Invoke(ctx, "/rpc.Operator/DCSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServer is the server API for Operator service.
// All implementations must embed UnimplementedOperatorServer
// for forward compatibility
type OperatorServer interface {
	// 提交请求
	DCSubmit(context.Context, *DCRequest) (*DCReply, error)
	mustEmbedUnimplementedOperatorServer()
}

// UnimplementedOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorServer struct {
}

func (UnimplementedOperatorServer) DCSubmit(context.Context, *DCRequest) (*DCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DCSubmit not implemented")
}
func (UnimplementedOperatorServer) mustEmbedUnimplementedOperatorServer() {}

// UnsafeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServer will
// result in compilation errors.
type UnsafeOperatorServer interface {
	mustEmbedUnimplementedOperatorServer()
}

func RegisterOperatorServer(s grpc.ServiceRegistrar, srv OperatorServer) {
	s.RegisterService(&Operator_ServiceDesc, srv)
}

func _Operator_DCSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).DCSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Operator/DCSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).DCSubmit(ctx, req.(*DCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Operator_ServiceDesc is the grpc.ServiceDesc for Operator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Operator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DCSubmit",
			Handler:    _Operator_DCSubmit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distcache.proto",
}

// OperatorFeaturesClient is the client API for OperatorFeatures service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorFeaturesClient interface {
	// 针对features太大 DCSubmit的额外时间开销较大的问题
	DCSubmitFeatures(ctx context.Context, in *DCRequest, opts ...grpc.CallOption) (OperatorFeatures_DCSubmitFeaturesClient, error)
}

type operatorFeaturesClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorFeaturesClient(cc grpc.ClientConnInterface) OperatorFeaturesClient {
	return &operatorFeaturesClient{cc}
}

func (c *operatorFeaturesClient) DCSubmitFeatures(ctx context.Context, in *DCRequest, opts ...grpc.CallOption) (OperatorFeatures_DCSubmitFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &OperatorFeatures_ServiceDesc.Streams[0], "/rpc.OperatorFeatures/DCSubmitFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorFeaturesDCSubmitFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperatorFeatures_DCSubmitFeaturesClient interface {
	Recv() (*DCReplyFeatures, error)
	grpc.ClientStream
}

type operatorFeaturesDCSubmitFeaturesClient struct {
	grpc.ClientStream
}

func (x *operatorFeaturesDCSubmitFeaturesClient) Recv() (*DCReplyFeatures, error) {
	m := new(DCReplyFeatures)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperatorFeaturesServer is the server API for OperatorFeatures service.
// All implementations must embed UnimplementedOperatorFeaturesServer
// for forward compatibility
type OperatorFeaturesServer interface {
	// 针对features太大 DCSubmit的额外时间开销较大的问题
	DCSubmitFeatures(*DCRequest, OperatorFeatures_DCSubmitFeaturesServer) error
	mustEmbedUnimplementedOperatorFeaturesServer()
}

// UnimplementedOperatorFeaturesServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorFeaturesServer struct {
}

func (UnimplementedOperatorFeaturesServer) DCSubmitFeatures(*DCRequest, OperatorFeatures_DCSubmitFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method DCSubmitFeatures not implemented")
}
func (UnimplementedOperatorFeaturesServer) mustEmbedUnimplementedOperatorFeaturesServer() {}

// UnsafeOperatorFeaturesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorFeaturesServer will
// result in compilation errors.
type UnsafeOperatorFeaturesServer interface {
	mustEmbedUnimplementedOperatorFeaturesServer()
}

func RegisterOperatorFeaturesServer(s grpc.ServiceRegistrar, srv OperatorFeaturesServer) {
	s.RegisterService(&OperatorFeatures_ServiceDesc, srv)
}

func _OperatorFeatures_DCSubmitFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DCRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorFeaturesServer).DCSubmitFeatures(m, &operatorFeaturesDCSubmitFeaturesServer{stream})
}

type OperatorFeatures_DCSubmitFeaturesServer interface {
	Send(*DCReplyFeatures) error
	grpc.ServerStream
}

type operatorFeaturesDCSubmitFeaturesServer struct {
	grpc.ServerStream
}

func (x *operatorFeaturesDCSubmitFeaturesServer) Send(m *DCReplyFeatures) error {
	return x.ServerStream.SendMsg(m)
}

// OperatorFeatures_ServiceDesc is the grpc.ServiceDesc for OperatorFeatures service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorFeatures_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.OperatorFeatures",
	HandlerType: (*OperatorFeaturesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DCSubmitFeatures",
			Handler:       _OperatorFeatures_DCSubmitFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "distcache.proto",
}
